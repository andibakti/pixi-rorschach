// Shader code


      // Description : Array and textureless GLSL 2D/3D/4D simplex 
      //               noise functions.
      //      Author : Ian McEwan, Ashima Arts.
      //  Maintainer : stegu
      //     Lastmod : 20201014 (stegu)
      //     License : Copyright (C) 2011 Ashima Arts. All rights reserved.
      //               Distributed under the MIT License. See LICENSE file.
      //               https://github.com/ashima/webgl-noise
      //               https://github.com/stegu/webgl-noise
      // 

vec3 mod289(vec3 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 mod289(vec4 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x) {
     return mod289(((x*34.0)+1.0)*x);
}

vec4 taylorInvSqrt(vec4 r)
{
  return 1.79284291400159 - 0.85373472095314 * r;
}

float snoise(vec3 v){ 
   const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
   const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

   // First corner
   vec3 i  = floor(v + dot(v, C.yyy) );
   vec3 x0 =   v - i + dot(i, C.xxx) ;

   // Other corners
   vec3 g = step(x0.yzx, x0.xyz);
   vec3 l = 1.0 - g;
   vec3 i1 = min( g.xyz, l.zxy );
   vec3 i2 = max( g.xyz, l.zxy );

   //   x0 = x0 - 0.0 + 0.0 * C.xxx;
   //   x1 = x0 - i1  + 1.0 * C.xxx;
   //   x2 = x0 - i2  + 2.0 * C.xxx;
   //   x3 = x0 - 1.0 + 3.0 * C.xxx;
   vec3 x1 = x0 - i1 + C.xxx;
   vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
   vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y

   // Permutations
   i = mod289(i); 
   vec4 p = permute( permute( permute( 
               i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
            + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) 
            + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

   // Gradients: 7x7 points over a square, mapped onto an octahedron.
   // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
   float n_ = 0.142857142857; // 1.0/7.0
   vec3  ns = n_ * D.wyz - D.xzx;

   vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)

   vec4 x_ = floor(j * ns.z);
   vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)

   vec4 x = x_ *ns.x + ns.yyyy;
   vec4 y = y_ *ns.x + ns.yyyy;
   vec4 h = 1.0 - abs(x) - abs(y);

   vec4 b0 = vec4( x.xy, y.xy );
   vec4 b1 = vec4( x.zw, y.zw );

   //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
   //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
   vec4 s0 = floor(b0)*2.0 + 1.0;
   vec4 s1 = floor(b1)*2.0 + 1.0;
   vec4 sh = -step(h, vec4(0.0));

   vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
   vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

   vec3 p0 = vec3(a0.xy,h.x);
   vec3 p1 = vec3(a0.zw,h.y);
   vec3 p2 = vec3(a1.xy,h.z);
   vec3 p3 = vec3(a1.zw,h.w);

   //Normalise gradients
   vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
   p0 *= norm.x;
   p1 *= norm.y;
   p2 *= norm.z;
   p3 *= norm.w;

   // Mix final noise value
   vec4 m = max(0.5 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
   m = m * m;
   return 105.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), 
                                 dot(p2,x2), dot(p3,x3) ) );
}

vec2 fade(vec2 t) {
  return t*t*t*(t*(t*6.0-15.0)+10.0);
}

// Classic Perlin noise
float cnoise(vec2 P){
  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);
  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);
  Pi = mod289(Pi); // To avoid truncation effects in permutation
  vec4 ix = Pi.xzxz;
  vec4 iy = Pi.yyww;
  vec4 fx = Pf.xzxz;
  vec4 fy = Pf.yyww;

  vec4 i = permute(permute(ix) + iy);

  vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;
  vec4 gy = abs(gx) - 0.5 ;
  vec4 tx = floor(gx + 0.5);
  gx = gx - tx;

  vec2 g00 = vec2(gx.x,gy.x);
  vec2 g10 = vec2(gx.y,gy.y);
  vec2 g01 = vec2(gx.z,gy.z);
  vec2 g11 = vec2(gx.w,gy.w);

  vec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));
  g00 *= norm.x;  
  g01 *= norm.y;  
  g10 *= norm.z;  
  g11 *= norm.w;  

  float n00 = dot(g00, vec2(fx.x, fy.x));
  float n10 = dot(g10, vec2(fx.y, fy.y));
  float n01 = dot(g01, vec2(fx.z, fy.z));
  float n11 = dot(g11, vec2(fx.w, fy.w));

  vec2 fade_xy = fade(Pf.xy);
  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);
  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);
  return 2.3 * n_xy;
}

precision mediump float;
uniform float time;
uniform float seed;
uniform float threshold;
uniform vec2 windowSize;
uniform vec2 spriteSize;

//x,y gl coordinates, z: frequency (inverted)
vec3 snoiseOctaves(vec3 v){
   float f = v.z;
   float amplitude = 1.0;
   float totalAmplitude = 0.0;
   float noise = 0.0;

   const float lacunarity = 2.0;
   const float persistence = 0.5;
   for(int i=0; i<6; i++){
      noise += amplitude * snoise(vec3(v.x*f+seed, v.y*f+seed, time*0.5+seed));
      f *= lacunarity;
      // f += f;  // mini optimization
      totalAmplitude += amplitude;
      amplitude *= persistence;
   }
   //normalize from 1:-1 to 1:0
   return vec3((noise/totalAmplitude + 1.0 )*0.5);
}

void main(){
   // float frequency_inv = 0.015625;           // 1 / 64.0
   // float frequency_inv = 0.0078125;          // 1 / 128.0
   // float frequency_inv = 0.005;                 // 1 / 200.0
   // float frequency_inv = 0.00390625;            // 1 / 256.0
   float frequency_inv = 0.003;            // 3 /1000 
   // float frequency_inv = 0.001953125;        // 1 / 512.0

   // float t = 0.45;
   vec3 v;
   float midpoint = spriteSize.x*0.5;
   vec2 coords = vec2(gl_FragCoord.xy * spriteSize/windowSize);
   coords.x *= windowSize.x/windowSize.y;
   if (coords.x > midpoint){
      float mirror_x = 2.0 * midpoint - coords.x; 
      v = vec3(mirror_x, coords.y, frequency_inv);
   }else{
      v = vec3(coords.x, coords.y, frequency_inv);
   }
   // coords.x-=midpoint;
   // coords.y-=midpoint;
   // v = vec3(coords.x, coords.y, frequency_inv);
   // v.x = sqrt(coords.x * coords.x + coords.y + coords.y);
   // v.y = atan(coords.y / coords.x);
   vec3 color = snoiseOctaves(v);

   // float distance2center = distance(v.xy,vec2(midpoint));
   // distance2center = distance2center / midpoint*2.0;       //  range: [0-1]
   // if(distance2center > 0.8){
   //    color.x += 0.5 * mix(0.3, 1.0, 0.5*distance2center);
   // }
   // gl_FragColor = vec4(vec3((distance2center)), 1.0);
   // color.x += distance2center;
   // distance2center += 0.05 *  0.5* (1.0 + snoise(vec3(v.xy*0.005, time*1.5)));
   
   float r_x = v.x - midpoint;
   float r_y = v.y - midpoint;
   float r_c = r_x * r_x + r_y * r_y;

   // r_c *= r_c;
   r_c = sqrt(r_c)/ midpoint;                   // normalize distance
   // if(r_c > 0.7){                              // 0.49 = 0.7^2
   //    // color.x += r_c;
   //    color.x += r_c;
   // }
   color.x += 0.05 * r_c;
   // color.x += 0.25 * clamp(r_c * r_c + 0.96 * r_c, 0.1, 0.8);
   // gl_FragColor = vec4(vec3((r_c)), 1.0);

   // color.x += 0.0625 * snoise(vec3(v.xy*0.005, time*1.5));
   
   if (color.x > threshold + 0.015*cos(0.5*time)){
      // color.x = 1.0;
      color = vec3(1.0);
   }
   // else if (color.x < 0.2 + 0.015*cos(0.5*time)){
   //    color.x = mix(0.5, 0.8, 1.0-color.x);
   // }
   else{
      
      // Edge darkening: invert scale
      color.x = color.x * -1.0 + 0.5;
      // color.x = sqrt(color.x);
      // color.x = 0.96*color.x * color.x + 0.52*color.x;
      // color.x += 0.03* cnoise(2.0*coords);
      // color.x += 0.03* cnoise(0.05*coords);

      // color.x += 0.0625 * snoise(vec3(v.xy*0.005, time*1.5));
      // color.x += 0.03125 * snoise(vec3(v.xy*0.01, time*1.25));
      color.x = color.x * color.x + 1.5*color.x;
      
      
      if(color.x > 0.4){
         // color.x = 1.0;
         v.xy += snoise(vec3(v.xy*0.005, time*1.5));
         color.x += 0.0625 * snoise(vec3(v.xy*0.005, time*1.5));
         color.x += 0.03125 * snoise(vec3(v.xy*0.01, time*1.25));
         color.x += 0.015 * snoise(vec3(v.xy*0.02, time*1.25));
      }
      
   }

   float color_dilation = 0.35;       // k_rho
   float border_smoothness = 0.345;    // k_delta
   float particular_quality = 1.0;     // k_omega

   color.x *= smoothstep(color_dilation-border_smoothness, color_dilation+border_smoothness, color.x);
   gl_FragColor = vec4(vec3(color.x), 1.0);
   // gl_FragColor = vec4(vec3(coords.y, 0.0, 0.0), 1.0);

}